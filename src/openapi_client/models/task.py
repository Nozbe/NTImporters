# coding: utf-8

"""
    Nozbe API

    Nozbe API specification

    The version of the OpenAPI document: 0.0.1
    Contact: support@nozbe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Task(BaseModel):
    """
    Task
    """ # noqa: E501
    id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    project_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=16)]] = None
    project_section_id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    author_id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    responsible_id: Optional[Annotated[str, Field(min_length=6, strict=True, max_length=16)]] = None
    recurrence_id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    created_at: Annotated[int, Field(strict=True, ge=0)]
    last_modified: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    due_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    ended_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    last_activity_at: Annotated[int, Field(strict=True, ge=0)]
    last_seen_activity_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    last_reviewed_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    review_triggered_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    review_reason: Optional[StrictStr] = None
    is_followed: Optional[StrictBool] = False
    is_abandoned: Optional[StrictBool] = False
    is_all_day: Optional[StrictBool] = False
    project_position: Optional[Union[StrictFloat, StrictInt]] = None
    priority_position: Optional[Union[StrictFloat, StrictInt]] = None
    missed_repeats: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    time_needed: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    time_spent: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "project_id", "project_section_id", "author_id", "responsible_id", "recurrence_id", "created_at", "last_modified", "due_at", "ended_at", "last_activity_at", "last_seen_activity_at", "last_reviewed_at", "review_triggered_at", "review_reason", "is_followed", "is_abandoned", "is_all_day", "project_position", "priority_position", "missed_repeats", "time_needed", "time_spent", "type"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('project_id')
    def project_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([a-zA-Z0-9]{16}|task_me)?$", value):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]{16}|task_me)?$/")
        return value

    @field_validator('project_section_id')
    def project_section_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('author_id')
    def author_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('responsible_id')
    def responsible_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([a-zA-Z0-9]{16}|author)$", value):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]{16}|author)$/")
        return value

    @field_validator('recurrence_id')
    def recurrence_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('review_reason')
    def review_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['null', 'due_date', 'reminder', 'delegated', 'mention', 'newly_added', 'overdue']):
            raise ValueError("must be one of enum values ('null', 'due_date', 'reminder', 'delegated', 'mention', 'newly_added', 'overdue')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['null', 'thread']):
            raise ValueError("must be one of enum values ('null', 'thread')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "author_id",
            "created_at",
            "last_modified",
            "last_activity_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if project_section_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_section_id is None and "project_section_id" in self.model_fields_set:
            _dict['project_section_id'] = None

        # set to None if responsible_id (nullable) is None
        # and model_fields_set contains the field
        if self.responsible_id is None and "responsible_id" in self.model_fields_set:
            _dict['responsible_id'] = None

        # set to None if recurrence_id (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence_id is None and "recurrence_id" in self.model_fields_set:
            _dict['recurrence_id'] = None

        # set to None if due_at (nullable) is None
        # and model_fields_set contains the field
        if self.due_at is None and "due_at" in self.model_fields_set:
            _dict['due_at'] = None

        # set to None if ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.ended_at is None and "ended_at" in self.model_fields_set:
            _dict['ended_at'] = None

        # set to None if last_seen_activity_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_seen_activity_at is None and "last_seen_activity_at" in self.model_fields_set:
            _dict['last_seen_activity_at'] = None

        # set to None if last_reviewed_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_reviewed_at is None and "last_reviewed_at" in self.model_fields_set:
            _dict['last_reviewed_at'] = None

        # set to None if review_triggered_at (nullable) is None
        # and model_fields_set contains the field
        if self.review_triggered_at is None and "review_triggered_at" in self.model_fields_set:
            _dict['review_triggered_at'] = None

        # set to None if review_reason (nullable) is None
        # and model_fields_set contains the field
        if self.review_reason is None and "review_reason" in self.model_fields_set:
            _dict['review_reason'] = None

        # set to None if priority_position (nullable) is None
        # and model_fields_set contains the field
        if self.priority_position is None and "priority_position" in self.model_fields_set:
            _dict['priority_position'] = None

        # set to None if time_needed (nullable) is None
        # and model_fields_set contains the field
        if self.time_needed is None and "time_needed" in self.model_fields_set:
            _dict['time_needed'] = None

        # set to None if time_spent (nullable) is None
        # and model_fields_set contains the field
        if self.time_spent is None and "time_spent" in self.model_fields_set:
            _dict['time_spent'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "project_section_id": obj.get("project_section_id"),
            "author_id": obj.get("author_id"),
            "responsible_id": obj.get("responsible_id"),
            "recurrence_id": obj.get("recurrence_id"),
            "created_at": obj.get("created_at"),
            "last_modified": obj.get("last_modified"),
            "due_at": obj.get("due_at"),
            "ended_at": obj.get("ended_at"),
            "last_activity_at": obj.get("last_activity_at"),
            "last_seen_activity_at": obj.get("last_seen_activity_at"),
            "last_reviewed_at": obj.get("last_reviewed_at"),
            "review_triggered_at": obj.get("review_triggered_at"),
            "review_reason": obj.get("review_reason"),
            "is_followed": obj.get("is_followed") if obj.get("is_followed") is not None else False,
            "is_abandoned": obj.get("is_abandoned") if obj.get("is_abandoned") is not None else False,
            "is_all_day": obj.get("is_all_day") if obj.get("is_all_day") is not None else False,
            "project_position": obj.get("project_position"),
            "priority_position": obj.get("priority_position"),
            "missed_repeats": obj.get("missed_repeats"),
            "time_needed": obj.get("time_needed"),
            "time_spent": obj.get("time_spent"),
            "type": obj.get("type")
        })
        return _obj


