# coding: utf-8

"""
    Nozbe API

    Nozbe API specification

    The version of the OpenAPI document: 0.0.1
    Contact: support@nozbe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.color import Color
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Project
    """ # noqa: E501
    id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    name: Annotated[str, Field(min_length=0, strict=True, max_length=255)]
    team_id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    author_id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    created_at: Annotated[int, Field(strict=True, ge=0)]
    ended_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    last_event_at: Annotated[int, Field(strict=True, ge=0)]
    last_seen_event_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    is_open: StrictBool
    is_favorite: Optional[StrictBool] = False
    is_single_actions: Optional[StrictBool] = False
    is_template: Optional[StrictBool] = False
    color: Optional[Color] = None
    team_color: Optional[Color] = None
    description: Optional[StrictStr] = None
    extra: Optional[StrictStr] = None
    preferences: Optional[StrictStr] = None
    sidebar_position: Optional[Union[StrictFloat, StrictInt]] = None
    shared_team_id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "team_id", "author_id", "created_at", "ended_at", "last_event_at", "last_seen_event_at", "is_open", "is_favorite", "is_single_actions", "is_template", "color", "team_color", "description", "extra", "preferences", "sidebar_position", "shared_team_id"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('team_id')
    def team_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('author_id')
    def author_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('shared_team_id')
    def shared_team_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "author_id",
            "created_at",
            "last_event_at",
            "shared_team_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.ended_at is None and "ended_at" in self.model_fields_set:
            _dict['ended_at'] = None

        # set to None if last_seen_event_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_seen_event_at is None and "last_seen_event_at" in self.model_fields_set:
            _dict['last_seen_event_at'] = None

        # set to None if color (nullable) is None
        # and model_fields_set contains the field
        if self.color is None and "color" in self.model_fields_set:
            _dict['color'] = None

        # set to None if team_color (nullable) is None
        # and model_fields_set contains the field
        if self.team_color is None and "team_color" in self.model_fields_set:
            _dict['team_color'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if extra (nullable) is None
        # and model_fields_set contains the field
        if self.extra is None and "extra" in self.model_fields_set:
            _dict['extra'] = None

        # set to None if preferences (nullable) is None
        # and model_fields_set contains the field
        if self.preferences is None and "preferences" in self.model_fields_set:
            _dict['preferences'] = None

        # set to None if sidebar_position (nullable) is None
        # and model_fields_set contains the field
        if self.sidebar_position is None and "sidebar_position" in self.model_fields_set:
            _dict['sidebar_position'] = None

        # set to None if shared_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.shared_team_id is None and "shared_team_id" in self.model_fields_set:
            _dict['shared_team_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "team_id": obj.get("team_id"),
            "author_id": obj.get("author_id"),
            "created_at": obj.get("created_at"),
            "ended_at": obj.get("ended_at"),
            "last_event_at": obj.get("last_event_at"),
            "last_seen_event_at": obj.get("last_seen_event_at"),
            "is_open": obj.get("is_open") if obj.get("is_open") is not None else False,
            "is_favorite": obj.get("is_favorite") if obj.get("is_favorite") is not None else False,
            "is_single_actions": obj.get("is_single_actions") if obj.get("is_single_actions") is not None else False,
            "is_template": obj.get("is_template") if obj.get("is_template") is not None else False,
            "color": obj.get("color"),
            "team_color": obj.get("team_color"),
            "description": obj.get("description"),
            "extra": obj.get("extra"),
            "preferences": obj.get("preferences"),
            "sidebar_position": obj.get("sidebar_position"),
            "shared_team_id": obj.get("shared_team_id")
        })
        return _obj


