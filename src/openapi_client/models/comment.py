# coding: utf-8

"""
    Nozbe API

    Nozbe API specification

    The version of the OpenAPI document: 0.0.1
    Contact: support@nozbe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Comment(BaseModel):
    """
    Comment
    """ # noqa: E501
    id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    body: StrictStr
    task_id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    author_id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    created_at: Annotated[int, Field(strict=True, ge=0)]
    edited_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    is_deleted: Optional[StrictBool] = False
    is_pinned: Optional[StrictBool] = False
    is_team: Optional[StrictBool] = False
    extra: Optional[StrictStr] = None
    reactions: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "body", "task_id", "author_id", "created_at", "edited_at", "is_deleted", "is_pinned", "is_team", "extra", "reactions"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('task_id')
    def task_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('author_id')
    def author_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Comment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "author_id",
            "created_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if edited_at (nullable) is None
        # and model_fields_set contains the field
        if self.edited_at is None and "edited_at" in self.model_fields_set:
            _dict['edited_at'] = None

        # set to None if extra (nullable) is None
        # and model_fields_set contains the field
        if self.extra is None and "extra" in self.model_fields_set:
            _dict['extra'] = None

        # set to None if reactions (nullable) is None
        # and model_fields_set contains the field
        if self.reactions is None and "reactions" in self.model_fields_set:
            _dict['reactions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Comment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "body": obj.get("body"),
            "task_id": obj.get("task_id"),
            "author_id": obj.get("author_id"),
            "created_at": obj.get("created_at"),
            "edited_at": obj.get("edited_at"),
            "is_deleted": obj.get("is_deleted") if obj.get("is_deleted") is not None else False,
            "is_pinned": obj.get("is_pinned") if obj.get("is_pinned") is not None else False,
            "is_team": obj.get("is_team") if obj.get("is_team") is not None else False,
            "extra": obj.get("extra"),
            "reactions": obj.get("reactions")
        })
        return _obj


