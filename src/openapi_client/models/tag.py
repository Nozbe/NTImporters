# coding: utf-8

"""
    Nozbe API

    Nozbe API specification

    The version of the OpenAPI document: 0.0.1
    Contact: support@nozbe.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.color import Color
from typing import Optional, Set
from typing_extensions import Self

class Tag(BaseModel):
    """
    Tag
    """ # noqa: E501
    id: Annotated[str, Field(min_length=16, strict=True, max_length=16)]
    team_id: Optional[Annotated[str, Field(min_length=16, strict=True, max_length=16)]] = None
    color: Optional[Color] = None
    team_color: Optional[Color] = None
    icon: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    is_favorite: Optional[StrictBool] = False
    sidebar_position: Optional[Union[StrictFloat, StrictInt]] = None
    archived_at: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    preferences: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "team_id", "color", "team_color", "icon", "name", "is_favorite", "sidebar_position", "archived_at", "preferences"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('team_id')
    def team_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]{16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]{16}$/")
        return value

    @field_validator('icon')
    def icon_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['null', 'cart', 'errands', 'phone', 'home', 'bulb', 'dollar', 'coffee', 'timer', 'book', 'car', 'battery', 'wrench', 'camera', 'heart', 'plane', 'baby', 'map-marker', 'rocket', 'music', 'blob', 'hardware', 'accessibility', 'apple-tag', 'buy', 'cards', 'clothes', 'computer', 'delivery', 'down', 'electricity', 'food', 'forklift', 'gift', 'image-tag', 'measure', 'mic', 'movie', 'nok', 'note', 'ok', 'play', 'promo', 'saw', 'up', 'pet', 'hourglass', 'gamepad', 'shield_x', 'shield', 'hammer', 'palette', 'student', 'puzzle', 'layers', 'crown', 'volume', 'folder', 'qr-code', 'user']):
            raise ValueError("must be one of enum values ('null', 'cart', 'errands', 'phone', 'home', 'bulb', 'dollar', 'coffee', 'timer', 'book', 'car', 'battery', 'wrench', 'camera', 'heart', 'plane', 'baby', 'map-marker', 'rocket', 'music', 'blob', 'hardware', 'accessibility', 'apple-tag', 'buy', 'cards', 'clothes', 'computer', 'delivery', 'down', 'electricity', 'food', 'forklift', 'gift', 'image-tag', 'measure', 'mic', 'movie', 'nok', 'note', 'ok', 'play', 'promo', 'saw', 'up', 'pet', 'hourglass', 'gamepad', 'shield_x', 'shield', 'hammer', 'palette', 'student', 'puzzle', 'layers', 'crown', 'volume', 'folder', 'qr-code', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['team_id'] = None

        # set to None if color (nullable) is None
        # and model_fields_set contains the field
        if self.color is None and "color" in self.model_fields_set:
            _dict['color'] = None

        # set to None if team_color (nullable) is None
        # and model_fields_set contains the field
        if self.team_color is None and "team_color" in self.model_fields_set:
            _dict['team_color'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if sidebar_position (nullable) is None
        # and model_fields_set contains the field
        if self.sidebar_position is None and "sidebar_position" in self.model_fields_set:
            _dict['sidebar_position'] = None

        # set to None if archived_at (nullable) is None
        # and model_fields_set contains the field
        if self.archived_at is None and "archived_at" in self.model_fields_set:
            _dict['archived_at'] = None

        # set to None if preferences (nullable) is None
        # and model_fields_set contains the field
        if self.preferences is None and "preferences" in self.model_fields_set:
            _dict['preferences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "team_id": obj.get("team_id"),
            "color": obj.get("color"),
            "team_color": obj.get("team_color"),
            "icon": obj.get("icon"),
            "name": obj.get("name"),
            "is_favorite": obj.get("is_favorite") if obj.get("is_favorite") is not None else False,
            "sidebar_position": obj.get("sidebar_position"),
            "archived_at": obj.get("archived_at"),
            "preferences": obj.get("preferences")
        })
        return _obj


